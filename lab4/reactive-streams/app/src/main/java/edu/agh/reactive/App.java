/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.agh.reactive;

import akka.actor.typed.ActorSystem;
import edu.agh.reactive.math.MathActor;

import java.io.IOException;

public class App {
    public static void main(String[] args) throws InterruptedException {
        //////////////////////////////////////////
        //TASK 0 - hello
        // create actor system

//        final ActorSystem<String> helloSystem =
//                        ActorSystem.create(HelloActor.create(), "helloActor");
//
//        // send messages
//        helloSystem.tell("hello world");


        //////////////////////////////////////////
        //TASK 1 - math operations
        final ActorSystem<MathActor.MathCommand> mathContext =
                ActorSystem.create(MathActor.create(), "actorMath");
        System.out.println("math main: actor system ready");

        // send messages
        mathContext.tell(new MathActor.MathCommandAdd(5, 3));
        mathContext.tell(new MathActor.MathCommandMultiply(5, 3, null));
        mathContext.tell(new MathActor.MathCommandMultiply(5, 2, null));
        mathContext.tell(new MathActor.MathCommandDivide(15, 3, null));
        mathContext.tell(new MathActor.MathCommandDivide(15, 5, null));

        mathContext.tell(new MathActor.MathCommandDivide(15, 0, null));
        Thread.sleep(2000);

        System.out.println("Math main: sending second package of messages");
        mathContext.tell(new MathActor.MathCommandMultiply(5, 3, null));
        mathContext.tell(new MathActor.MathCommandMultiply(5, 2, null));
        mathContext.tell(new MathActor.MathCommandDivide(15, 3, null));
        mathContext.tell(new MathActor.MathCommandDivide(15, 5, null));
        System.out.println("Math main: messages send");


        /// TASK 3 - Reactive Streams in Akka Streams
        //final ActorSystem streamSystem = ActorSystem.create(Behaviors.empty(), "streams");
        //final Materializer materializer = Materializer.createMaterializer(streamSystem);
        // case 1
        //final Source<Integer, NotUsed> source = Source.range(1, 100);
        //final Flow<Integer, String, NotUsed> flow = Flow.fromFunction((Integer n) -> n.toString());
        //final Sink<String, CompletionStage<Done>> sink = Sink.foreach(str->System.out.println(str));
        //final RunnableGraph<NotUsed> runnableGraph = source.via(flow).to(sink);
        //runnableGraph.run(materializer);

        // task 4 - graph dsl
        // how to create
        // step 1 - frame
        //final Graph<ClosedShape, CompletionStage<Done>> specialGraph = GraphDSL.create(sink , (builder, out)-> {
        //step 2 - building blocks
        //builder.add(sink);
        //    final Outlet<Integer> dslSource = builder.add(source).out();
        // step 3 - glue components
        //        builder.from(dslSource).via(builder.add(flow)).to(out);
        // step 4 closing
        //        return ClosedShape.getInstance();
        //});

        //RunnableGraph.fromGraph(specialGraph).run(materializer);

        try {
            System.out.println(">>> Press ENTER to exit <<<");
            System.in.read();
        } catch (IOException ignored) {
        } finally {
//            greeterMain.terminate();
            mathContext.terminate();
//            helloSystem.terminate();
//            streamSystem.terminate();
        }
    }
}
