# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.3
#
# <auto-generated>
#
# Generated from file `SmartHome.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice
import IcePy

# Start of module SmartHome
_M_SmartHome = Ice.openModule('SmartHome')
__name__ = 'SmartHome'

if 'Color' not in _M_SmartHome.__dict__:
    _M_SmartHome.Color = Ice.createTempClass()


    class Color(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None

        valueOf = classmethod(valueOf)


    Color.Red = Color("Red", 0)
    Color.Green = Color("Green", 1)
    Color.Blue = Color("Blue", 2)
    Color.Yellow = Color("Yellow", 3)
    Color.White = Color("White", 4)
    Color.BurdeLove = Color("BurdeLove", 5)
    Color._enumerators = {0: Color.Red, 1: Color.Green, 2: Color.Blue, 3: Color.Yellow, 4: Color.White,
                          5: Color.BurdeLove}

    _M_SmartHome._t_Color = IcePy.defineEnum('::SmartHome::Color', Color, (), Color._enumerators)

    _M_SmartHome.Color = Color
    del Color

if 'InfoKey' not in _M_SmartHome.__dict__:
    _M_SmartHome.InfoKey = Ice.createTempClass()


    class InfoKey(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None

        valueOf = classmethod(valueOf)


    InfoKey.Temperature = InfoKey("Temperature", 0)
    InfoKey.SmokeLevel = InfoKey("SmokeLevel", 1)
    InfoKey.Location = InfoKey("Location", 2)
    InfoKey.Brightness = InfoKey("Brightness", 3)
    InfoKey.Color = InfoKey("Color", 4)
    InfoKey._enumerators = {0: InfoKey.Temperature, 1: InfoKey.SmokeLevel, 2: InfoKey.Location, 3: InfoKey.Brightness,
                            4: InfoKey.Color}

    _M_SmartHome._t_InfoKey = IcePy.defineEnum('::SmartHome::InfoKey', InfoKey, (), InfoKey._enumerators)

    _M_SmartHome.InfoKey = InfoKey
    del InfoKey

if '_t_Colors' not in _M_SmartHome.__dict__:
    _M_SmartHome._t_Colors = IcePy.defineSequence('::SmartHome::Colors', (), _M_SmartHome._t_Color)

if '_t_MoreInfo' not in _M_SmartHome.__dict__:
    _M_SmartHome._t_MoreInfo = IcePy.defineDictionary('::SmartHome::MoreInfo', (), _M_SmartHome._t_InfoKey,
                                                      IcePy._t_string)

if 'Info' not in _M_SmartHome.__dict__:
    _M_SmartHome.Info = Ice.createTempClass()


    class Info(object):
        def __init__(self, status='', moreInfo=None):
            self.status = status
            self.moreInfo = moreInfo

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_SmartHome.Info):
                return NotImplemented
            else:
                if self.status != other.status:
                    return False
                if self.moreInfo != other.moreInfo:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_Info)

        __repr__ = __str__


    _M_SmartHome._t_Info = IcePy.defineStruct('::SmartHome::Info', Info, (), (
        ('status', (), IcePy._t_string),
        ('moreInfo', (), _M_SmartHome._t_MoreInfo)
    ))

    _M_SmartHome.Info = Info
    del Info

if 'WrongColorException' not in _M_SmartHome.__dict__:
    _M_SmartHome.WrongColorException = Ice.createTempClass()


    class WrongColorException(Ice.UserException):
        def __init__(self, message=''):
            self.message = message

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::WrongColorException'


    _M_SmartHome._t_WrongColorException = IcePy.defineException('::SmartHome::WrongColorException', WrongColorException,
                                                                (), False, None,
                                                                (('message', (), IcePy._t_string, False, 0),))
    WrongColorException._ice_type = _M_SmartHome._t_WrongColorException

    _M_SmartHome.WrongColorException = WrongColorException
    del WrongColorException

if 'WrongMethodException' not in _M_SmartHome.__dict__:
    _M_SmartHome.WrongMethodException = Ice.createTempClass()


    class WrongMethodException(Ice.UserException):
        def __init__(self, message=''):
            self.message = message

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::WrongMethodException'


    _M_SmartHome._t_WrongMethodException = IcePy.defineException('::SmartHome::WrongMethodException',
                                                                 WrongMethodException, (), False, None,
                                                                 (('message', (), IcePy._t_string, False, 0),))
    WrongMethodException._ice_type = _M_SmartHome._t_WrongMethodException

    _M_SmartHome.WrongMethodException = WrongMethodException
    del WrongMethodException

if 'BrightnessPercentageOutOfBoundException' not in _M_SmartHome.__dict__:
    _M_SmartHome.BrightnessPercentageOutOfBoundException = Ice.createTempClass()


    class BrightnessPercentageOutOfBoundException(Ice.UserException):
        def __init__(self, percentage=0):
            self.percentage = percentage

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::BrightnessPercentageOutOfBoundException'


    _M_SmartHome._t_BrightnessPercentageOutOfBoundException = IcePy.defineException(
        '::SmartHome::BrightnessPercentageOutOfBoundException', BrightnessPercentageOutOfBoundException, (), False,
        None, (('percentage', (), IcePy._t_int, False, 0),))
    BrightnessPercentageOutOfBoundException._ice_type = _M_SmartHome._t_BrightnessPercentageOutOfBoundException

    _M_SmartHome.BrightnessPercentageOutOfBoundException = BrightnessPercentageOutOfBoundException
    del BrightnessPercentageOutOfBoundException

_M_SmartHome._t_Device = IcePy.defineValue('::SmartHome::Device', Ice.Value, -1, (), False, True, None, ())

if 'DevicePrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.DevicePrx = Ice.createTempClass()


    class DevicePrx(Ice.ObjectPrx):

        def turnOn(self, context=None):
            return _M_SmartHome.Device._op_turnOn.invoke(self, ((), context))

        def turnOnAsync(self, context=None):
            return _M_SmartHome.Device._op_turnOn.invokeAsync(self, ((), context))

        def begin_turnOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Device._op_turnOn.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOn(self, _r):
            return _M_SmartHome.Device._op_turnOn.end(self, _r)

        def turnOff(self, context=None):
            return _M_SmartHome.Device._op_turnOff.invoke(self, ((), context))

        def turnOffAsync(self, context=None):
            return _M_SmartHome.Device._op_turnOff.invokeAsync(self, ((), context))

        def begin_turnOff(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Device._op_turnOff.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOff(self, _r):
            return _M_SmartHome.Device._op_turnOff.end(self, _r)

        def getInfo(self, context=None):
            return _M_SmartHome.Device._op_getInfo.invoke(self, ((), context))

        def getInfoAsync(self, context=None):
            return _M_SmartHome.Device._op_getInfo.invokeAsync(self, ((), context))

        def begin_getInfo(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Device._op_getInfo.begin(self, ((), _response, _ex, _sent, context))

        def end_getInfo(self, _r):
            return _M_SmartHome.Device._op_getInfo.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.DevicePrx.ice_checkedCast(proxy, '::SmartHome::Device', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.DevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Device'


    _M_SmartHome._t_DevicePrx = IcePy.defineProxy('::SmartHome::Device', DevicePrx)

    _M_SmartHome.DevicePrx = DevicePrx
    del DevicePrx

    _M_SmartHome.Device = Ice.createTempClass()


    class Device(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device')

        def ice_id(self, current=None):
            return '::SmartHome::Device'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Device'

        def turnOn(self, current=None):
            raise NotImplementedError("servant method 'turnOn' not implemented")

        def turnOff(self, current=None):
            raise NotImplementedError("servant method 'turnOff' not implemented")

        def getInfo(self, current=None):
            raise NotImplementedError("servant method 'getInfo' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_DeviceDisp)

        __repr__ = __str__


    _M_SmartHome._t_DeviceDisp = IcePy.defineClass('::SmartHome::Device', Device, (), None, ())
    Device._ice_type = _M_SmartHome._t_DeviceDisp

    Device._op_turnOn = IcePy.Operation('turnOn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (),
                                        (), (), None, (_M_SmartHome._t_WrongMethodException,))
    Device._op_turnOff = IcePy.Operation('turnOff', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (),
                                         (), (), None, (_M_SmartHome._t_WrongMethodException,))
    Device._op_getInfo = IcePy.Operation('getInfo', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (),
                                         (), (), ((), _M_SmartHome._t_Info, False, 0), ())

    _M_SmartHome.Device = Device
    del Device

_M_SmartHome._t_Printer = IcePy.defineValue('::SmartHome::Printer', Ice.Value, -1, (), False, True, None, ())

if 'PrinterPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.PrinterPrx = Ice.createTempClass()


    class PrinterPrx(_M_SmartHome.DevicePrx):

        def _print(self, message, context=None):
            return _M_SmartHome.Printer._op_print.invoke(self, ((message,), context))

        def printAsync(self, message, context=None):
            return _M_SmartHome.Printer._op_print.invokeAsync(self, ((message,), context))

        def begin_print(self, message, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Printer._op_print.begin(self, ((message,), _response, _ex, _sent, context))

        def end_print(self, _r):
            return _M_SmartHome.Printer._op_print.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.PrinterPrx.ice_checkedCast(proxy, '::SmartHome::Printer', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.PrinterPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Printer'


    _M_SmartHome._t_PrinterPrx = IcePy.defineProxy('::SmartHome::Printer', PrinterPrx)

    _M_SmartHome.PrinterPrx = PrinterPrx
    del PrinterPrx

    _M_SmartHome.Printer = Ice.createTempClass()


    class Printer(_M_SmartHome.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device', '::SmartHome::Printer')

        def ice_id(self, current=None):
            return '::SmartHome::Printer'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Printer'

        def _print(self, message, current=None):
            raise NotImplementedError("servant method '_print' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_PrinterDisp)

        __repr__ = __str__


    _M_SmartHome._t_PrinterDisp = IcePy.defineClass('::SmartHome::Printer', Printer, (), None,
                                                    (_M_SmartHome._t_DeviceDisp,))
    Printer._ice_type = _M_SmartHome._t_PrinterDisp

    Printer._op_print = IcePy.Operation('print', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (),
                                        (((), IcePy._t_string, False, 0),), (), None, ())

    _M_SmartHome.Printer = Printer
    del Printer

_M_SmartHome._t_Bulb = IcePy.defineValue('::SmartHome::Bulb', Ice.Value, -1, (), False, True, None, ())

if 'BulbPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.BulbPrx = Ice.createTempClass()


    class BulbPrx(_M_SmartHome.DevicePrx):

        def changeColor(self, color, context=None):
            return _M_SmartHome.Bulb._op_changeColor.invoke(self, ((color,), context))

        def changeColorAsync(self, color, context=None):
            return _M_SmartHome.Bulb._op_changeColor.invokeAsync(self, ((color,), context))

        def begin_changeColor(self, color, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Bulb._op_changeColor.begin(self, ((color,), _response, _ex, _sent, context))

        def end_changeColor(self, _r):
            return _M_SmartHome.Bulb._op_changeColor.end(self, _r)

        def dim(self, context=None):
            return _M_SmartHome.Bulb._op_dim.invoke(self, ((), context))

        def dimAsync(self, context=None):
            return _M_SmartHome.Bulb._op_dim.invokeAsync(self, ((), context))

        def begin_dim(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Bulb._op_dim.begin(self, ((), _response, _ex, _sent, context))

        def end_dim(self, _r):
            return _M_SmartHome.Bulb._op_dim.end(self, _r)

        def brighten(self, context=None):
            return _M_SmartHome.Bulb._op_brighten.invoke(self, ((), context))

        def brightenAsync(self, context=None):
            return _M_SmartHome.Bulb._op_brighten.invokeAsync(self, ((), context))

        def begin_brighten(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Bulb._op_brighten.begin(self, ((), _response, _ex, _sent, context))

        def end_brighten(self, _r):
            return _M_SmartHome.Bulb._op_brighten.end(self, _r)

        def changeBrightness(self, percentagePoints, context=None):
            return _M_SmartHome.Bulb._op_changeBrightness.invoke(self, ((percentagePoints,), context))

        def changeBrightnessAsync(self, percentagePoints, context=None):
            return _M_SmartHome.Bulb._op_changeBrightness.invokeAsync(self, ((percentagePoints,), context))

        def begin_changeBrightness(self, percentagePoints, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Bulb._op_changeBrightness.begin(self,
                                                                ((percentagePoints,), _response, _ex, _sent, context))

        def end_changeBrightness(self, _r):
            return _M_SmartHome.Bulb._op_changeBrightness.end(self, _r)

        def getAllPossibleColors(self, context=None):
            return _M_SmartHome.Bulb._op_getAllPossibleColors.invoke(self, ((), context))

        def getAllPossibleColorsAsync(self, context=None):
            return _M_SmartHome.Bulb._op_getAllPossibleColors.invokeAsync(self, ((), context))

        def begin_getAllPossibleColors(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Bulb._op_getAllPossibleColors.begin(self, ((), _response, _ex, _sent, context))

        def end_getAllPossibleColors(self, _r):
            return _M_SmartHome.Bulb._op_getAllPossibleColors.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.BulbPrx.ice_checkedCast(proxy, '::SmartHome::Bulb', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.BulbPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Bulb'


    _M_SmartHome._t_BulbPrx = IcePy.defineProxy('::SmartHome::Bulb', BulbPrx)

    _M_SmartHome.BulbPrx = BulbPrx
    del BulbPrx

    _M_SmartHome.Bulb = Ice.createTempClass()


    class Bulb(_M_SmartHome.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Bulb', '::SmartHome::Device')

        def ice_id(self, current=None):
            return '::SmartHome::Bulb'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Bulb'

        def changeColor(self, color, current=None):
            raise NotImplementedError("servant method 'changeColor' not implemented")

        def dim(self, current=None):
            raise NotImplementedError("servant method 'dim' not implemented")

        def brighten(self, current=None):
            raise NotImplementedError("servant method 'brighten' not implemented")

        def changeBrightness(self, percentagePoints, current=None):
            raise NotImplementedError("servant method 'changeBrightness' not implemented")

        def getAllPossibleColors(self, current=None):
            raise NotImplementedError("servant method 'getAllPossibleColors' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_BulbDisp)

        __repr__ = __str__


    _M_SmartHome._t_BulbDisp = IcePy.defineClass('::SmartHome::Bulb', Bulb, (), None, (_M_SmartHome._t_DeviceDisp,))
    Bulb._ice_type = _M_SmartHome._t_BulbDisp

    Bulb._op_changeColor = IcePy.Operation('changeColor', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False,
                                           None, (), (((), _M_SmartHome._t_Color, False, 0),), (), None,
                                           (_M_SmartHome._t_WrongColorException,))
    Bulb._op_dim = IcePy.Operation('dim', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (),
                                   None, (_M_SmartHome._t_BrightnessPercentageOutOfBoundException,))
    Bulb._op_brighten = IcePy.Operation('brighten', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (),
                                        (), (), None, (_M_SmartHome._t_BrightnessPercentageOutOfBoundException,))
    Bulb._op_changeBrightness = IcePy.Operation('changeBrightness', Ice.OperationMode.Normal, Ice.OperationMode.Normal,
                                                False, None, (), (((), IcePy._t_int, False, 0),), (), None,
                                                (_M_SmartHome._t_BrightnessPercentageOutOfBoundException,))
    Bulb._op_getAllPossibleColors = IcePy.Operation('getAllPossibleColors', Ice.OperationMode.Normal,
                                                    Ice.OperationMode.Normal, False, None, (), (), (),
                                                    ((), _M_SmartHome._t_Colors, False, 0),
                                                    (_M_SmartHome._t_WrongColorException,))

    _M_SmartHome.Bulb = Bulb
    del Bulb

# End of module SmartHome
